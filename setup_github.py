#!/usr/bin/env python3
"""
Setup script for GitHub API integration
Helps configure the portfolio for development or production use
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create .env file with GitHub configuration"""
    env_path = Path('.env')
    
    if env_path.exists():
        print("üìÑ .env file already exists")
        choice = input("Do you want to update GitHub settings? (y/n): ").lower().strip()
        if choice != 'y':
            return
    
    print("\nüîß GitHub API Configuration Setup")
    print("=" * 50)
    
    # Ask for mode
    print("\nChoose GitHub mode:")
    print("1. Mock Mode (Development) - Uses fake data, no API calls")
    print("2. Demo Mode (Development) - Uses real popular repositories as examples")
    print("3. Production Mode - Uses real API with your repositories")
    
    while True:
        choice = input("\nEnter choice (1/2/3): ").strip()
        if choice in ['1', '2', '3']:
            break
        print("Invalid choice. Please enter 1, 2, or 3.")
    
    # Configure based on choice
    if choice == '1':
        mock_mode = 'True'
        github_token = ''
        print("\n‚úÖ Mock Mode selected - Will use fake data for development")
        
    elif choice == '2':
        mock_mode = 'False'
        github_token = input("\nEnter GitHub token (optional, press Enter to skip): ").strip()
        print("\n‚úÖ Demo Mode selected - Will use popular repositories as examples")
        
    else:  # choice == '3'
        mock_mode = 'False'
        print("\nüîë For production mode, you'll need a GitHub personal access token")
        print("Get one from: https://github.com/settings/tokens")
        github_token = input("Enter GitHub token: ").strip()
        if not github_token:
            print("‚ö†Ô∏è  Warning: No token provided. You may hit rate limits quickly.")
        else:
            print("‚úÖ Production Mode selected - Will use real GitHub API")
    
    # Read existing .env or create new
    env_content = {}
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if '=' in line and not line.startswith('#'):
                    key, value = line.split('=', 1)
                    env_content[key] = value
    
    # Update GitHub settings
    env_content['GITHUB_MOCK_MODE'] = mock_mode
    if github_token:
        env_content['GITHUB_TOKEN'] = github_token
    
    # Set some defaults if not present
    if 'SECRET_KEY' not in env_content:
        import secrets
        env_content['SECRET_KEY'] = secrets.token_hex(32)
    
    if 'DEBUG' not in env_content:
        env_content['DEBUG'] = 'True'
    
    if 'DATABASE_URL' not in env_content:
        env_content['DATABASE_URL'] = 'sqlite:///portfolio.db'
    
    # Write .env file
    with open(env_path, 'w') as f:
        f.write("# Portfolio Website Environment Configuration\n")
        f.write("# Generated by setup_github.py\n\n")
        
        for key, value in env_content.items():
            f.write(f"{key}={value}\n")
    
    print(f"\n‚úÖ .env file {'updated' if env_path.exists() else 'created'} successfully!")
    print(f"üìÅ Location: {env_path.absolute()}")
    
    return choice

def test_github_service():
    """Test the GitHub service"""
    print("\nüß™ Testing GitHub Service...")
    
    try:
        # Import after env is set up
        from dotenv import load_dotenv
        load_dotenv()
        
        from app import app
        from github_service import github_service
        from models import Project
        
        with app.app_context():
            # Initialize the service
            if not github_service.cache:
                github_service.init_cache(app)
            
            # Test with a sample repository
            print("Testing with sample repository...")
            
            # Check if we have projects in database
            projects = Project.query.filter(Project.github_url.isnot(None)).limit(3).all()
            
            if projects:
                print(f"Found {len(projects)} projects with GitHub URLs")
                
                for project in projects:
                    username, repo = project.extract_github_repo()
                    if username and repo:
                        print(f"\nTesting: {username}/{repo}")
                        data = github_service.get_repository_data(username, repo)
                        
                        if data:
                            print(f"  ‚úÖ Success! Stars: {data.get('stargazers_count', 0)}, Forks: {data.get('forks_count', 0)}")
                            if data.get('mock_data'):
                                print("  üìù (Mock data)")
                            elif data.get('demo_data'):
                                print(f"  üîó (Demo data from {data.get('demo_source')})")
                        else:
                            print("  ‚ùå Failed to fetch data")
                        
                        break  # Just test one
            else:
                print("No projects with GitHub URLs found in database")
                print("You may need to populate sample data first")
        
    except Exception as e:
        print(f"‚ùå Error testing GitHub service: {e}")
        return False
    
    return True

def main():
    """Main setup function"""
    print("üöÄ Portfolio GitHub Integration Setup")
    print("=" * 40)
    
    # Check if we're in the right directory
    if not Path('app.py').exists():
        print("‚ùå Error: app.py not found. Please run this script from the portfolio root directory.")
        sys.exit(1)
    
    # Setup environment
    choice = create_env_file()
    
    # Test the setup
    if input("\nTest GitHub service? (y/n): ").lower().strip() == 'y':
        success = test_github_service()
        
        if success:
            print("\nüéâ Setup completed successfully!")
            
            if choice == '1':
                print("\nüìù Mock Mode Tips:")
                print("- No real API calls will be made")
                print("- Fake data will be generated consistently")
                print("- Great for development and testing")
                
            elif choice == '2':
                print("\nüîó Demo Mode Tips:")
                print("- Uses real data from popular repositories")
                print("- Good for showcasing the interface")
                print("- Limited API calls (uses cache)")
                
            else:
                print("\nüîë Production Mode Tips:")
                print("- Make sure your GitHub token has appropriate permissions")
                print("- Monitor your API rate limits")
                print("- Consider setting up Redis for production caching")
            
            print("\nüìö Next steps:")
            print("1. Run: flask update-github-data --help")
            print("2. Run: flask github-cache-stats")
            print("3. Start your application: python app.py")
        else:
            print("\n‚ö†Ô∏è  Setup completed but testing failed. Check your configuration.")
    else:
        print("\n‚úÖ Environment configured! You can test it later with: flask github-cache-stats")

if __name__ == '__main__':
    main()
